extends layout

block content
        .row
          .panel.panel-info
            .panel-heading
              h3.panel-title How to use the editor
            .panel-body
              | The iFLUX programming model is based on 
              b Event-Condition-Action
              |  rules:
              p
              ol
                li
                  b Event sources
                  |  push 
                  b events
                  |  to the 
                  code /events
                  |  API endpoint (exposed by the iFLUX middleware).
                p
                li
                  | The 
                  b rules
                  |  which have been configured on the middleware are evaluated. Every rule specify certain 
                  b conditions
                  |  (on the source, the event type, the event properties). Every rule also specify an 
                  b action
                  | , which should be triggered if all conditions are met when an event is received. Every rule also specifies how the action properties should be computed (based on the triggering event properties).
                p
                li
                  | When an 
                  b action
                  |  is triggered, the iFLUX middleware issues an HTTP request to the 
                  code /actions
                  |  API endpoint (exposed by an iFLUX-compatible actuator or gateway.
              p
              br
              |             The iFLUX middleware exposes the 
              code /rules
              |  API endpoint, so that users can 
              b create new rules
              | . The payload accepted by the endpoint can be a bit tricky to write. The objective of this editor is to address this issue and to make the process easier. Using the editor involves three steps:
              p
              ol
                li
                  | Specify the 
                  b IF
                  |  clause of the rule, by defining conditions on the event source and the event type (conditions on event properties are not supported yet). In this step, also provide an example of event that would trigger the rule (this will make the next step easier).
                p
                li
                  | Specify the 
                  b THEN
                  |  clause of the rule. To do that, you will first specify an action target endpoint (this URL points to an action target component, such as an actuator or a gateway). You will also provide a schema that specifies how to generate the action payload (both the action type and the action properties).
                p
                li
                  | Finally, the editor will 
                  b generate a rule payload
                  | . You can then grab this JSON data and POST it to the 
                  code /rules
                  |  API endpoint to add the rule to your iFLUX setup.
                p
        br
        .row
          .alert.alert-info(role='alert')
            b Preamble
            | : Describe what the rule is supposed to do.
        br
        .row
          .col-md-9
            label(for='tfRuleDescription') Describe what the rule should do.
            input#tfRuleDescription.form-control(type='text', placeholder='If something happens, then do something')
        br
        br
        br
        .row
          .alert.alert-info(role='alert')
            b Step 1
            | : 
            b IF
            |  this event happens...
        br
        .row
          .col-md-9
            label(for='tfEventSource')
              | Do you want to trigger the rule only if the event is notified by a specific source? If not, you can indicate *
            input#tfEventSource.form-control(type='text', placeholder='*, http://api.flux.io/eventSources/82983')
          .col-md-3
            .panel.panel-info
              .panel-heading
                h5.panel-title Event source
              .panel-body
                p
                  | An event source is a particular sensor (hardware or software), which is registered on the iFLUX platform and which issues event notifications.
                p
                  b Example:
                  |  a thermometer
                p
                  input#bSampleEventSourceAny.btn.btn-primary.btn-xs(type='button', value='any (*)')
                  input#bSampleEventSourceThermometer.btn.btn-primary.btn-xs(type='button', value='thermometer')
        br
        .row
          .col-md-9
            label(for='tfEventSource')
              | Do you want to trigger the rule only for a specific type of event? You can also enter *
            input#tfEventType.form-control(type='text', placeholder='*, http://api.flux.io/schemas/userActionEvent')
          .col-md-3
            .panel.panel-info
              .panel-heading
                h3.panel-title Event type
              .panel-body
                p
                  | Event sources emit events of different types. A type is associated with a list of properties.
                p
                  b Example:
                  |  a temperature event
                p
                  input#bSampleEventTypeAny.btn.btn-primary.btn-xs(type='button', value='any (*)')
                  input#bSampleEventTypeTemperature.btn.btn-primary.btn-xs(type='button', value='temperature')
        br
        .row
          .col-md-9
            label(for='tfEventSource') Enter an example of event, so that you can test the rule.
            #eventEditor.editor
              | { "timestamp" : "2015-01-12T05:21:07Z", "source" : "/event-sources/JI8928JFK", "type" : "/eventTypes/temperatureEventSchema", "properties" : { "temperature" : 22.5, "location" : "room 1" } }
          .col-md-3
            .panel.panel-info
              .panel-heading
                h3.panel-title Event
              .panel-body
                p
                  | An iFLUX event is defined by a source, a type, a timestamp and a list of custom properties.
                p
                  b Example:
                  |  a temperature event may have 2 custom properties: location and temperature
                p
                  input#bSampleEventTemperature.btn.btn-primary.btn-xs(type='button', value='temperature event')
        br
        br
        br
        .row
          .alert.alert-info(role='alert')
            b Step 2
            | : ...
            b THEN
            |  trigger this action!
        //
          <br>
          <div class="row">
          <div class="col-md-9">
          <label for="tfEventSource">Select the type of action that you want to trigger.</label>
          <input type="text" class="form-control" id="tfEventSource" placeholder="*, http://api.flux.io/eventSources/82983">
          </div>
          <div class="col-md-3">
          <div class="panel panel-info">
          <div class="panel-heading">
          <h5 class="panel-title">Action type</h5>
          </div>
          <div class="panel-body">
          <p>Action targets can react to various types of actions. An action type defines a list of custom properties.</p>
          <p><b>Example:</b> a street light controller might react to turn-on and turn-off actions. The turn-off action type might define a time property, making it possible to specify when the light should be switched off.</p>
          </div>
          </div>
          </div>
          </div>
        br
        .row
          .col-md-9
            label(for='tfEventSource') Select API endpoint provided by your action target.
            input#tfActionTarget.form-control(type='text', placeholder='https://actuator-gateway.iflux.io/api')
          .col-md-3
            .panel.panel-info
              .panel-heading
                h5.panel-title Action target
              .panel-body
                p
                  | An iFLUX action target implements the /actions/ endpoint defined in the iFLUX API. It accepts action payloads and executes them.
                p
                  b Example:
                  |  a street light controller might accept actions to turn lights on and off.
        br
        .row
          .col-md-9
            #schemaEditor.editor
              | {"type" : "sendEmail", "properties" : {"email" : "aware", "subject" : "New temperature", "body" : "The temperature in {{ properties.location }} is now: {{ properties.temperature }}." }}
          .col-md-3
            .panel.panel-info
              .panel-heading
                h3.panel-title Define a transformation schema (Handlebars)
              .panel-body
                | The schema specifies how to generate an action, based on the incoming event properties.
        br
        br
        br
        .row
          .alert.alert-success(role='alert')
            b Step 3
            | : Generate and grab an 
            b API request
            |  to create the rule.
        br
        .row
          .col-md-9
            #actionEditor.editor {"timestamp": "now","type": "hello"}
          .col-md-3
            .panel.panel-success
              .panel-heading
                h3.panel-title Check the result action payload.
              .panel-body
                | An iFLUX action is defined by a type and a list of properties.
        br
        .row
          .col-md-9
            #apiRequestEditor.editor
          .col-md-3
            .panel.panel-success
              .panel-heading
                h5.panel-title API request
              .panel-body
                input#bRecompute.btn.btn-success(type='button', value='Generate')

block scripts
    script(src='https://code.jquery.com/jquery-2.1.3.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.1.3/ace.js', type='text/javascript', charset='utf-8')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0/handlebars.min.js')
    script(src='/javascripts/editor.js')